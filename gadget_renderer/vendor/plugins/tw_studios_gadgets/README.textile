h1. Introduction

This plugin implements a Rails gadget hosting server using "Shindig":http://shindig.apache.org/. Shindig is the reference OpenSocial Gadget implementation provided by Apache.

h1. What we (re-)implemented

Shindig is highly coupled to the Java servlet spec, which makes it hard to 'drop-in' into a Rails application (without making changes to the web.xml, security etc.). This plugin re-implements/ports Shindig Java servlets to Rails controllers to make it easier to interop with rails applications . It also simplifies aspects of security to work easily with Rails security frameworks.

Shindig currently works with OAuth 1.0a. Since all studios products are going to be using OAuth 2, this plugin contains an alternate implementation for the user authentication that uses OAuth2 ("draft v09":http://tools.ietf.org/html/draft-ietf-oauth-v2-09).

h1. Available Endpoint URLs

See config/routes.rb in the plugin for more details.

*APIs required for OAuth2*

* /gadgets/oauthcallback (GadgetOauthCallbackController) - used for OAuth2 provider to notify gadget rendering server after end user approved resource accessing grant.

*Accessed from the browser*

* gadgets/oauth_clients (GadgetsOauthClients) - to manage OAuth2 clients (should be available only to admins)

*URLs used internally by the gadget framework*

* /gadgets/ifr (GadgetRenderingController) - used for rendering a gadget
* /gadgets/makeRequest (GadgetMakeRequestController) - used for proxying javascript request ("gadget.io.makeRequest":http://code.google.com/apis/gadgets/docs/reference/#gadgets.io.makeRequest) from a gadget rendered inside an iframe
* /gadgets/concat (GadgetProxyController)- used to proxy stylesheets(&lt;link rel="stylesheet" href="some.css"&gt;) and javascript (&lt;script src="some.js"&gt;) links.
* /gadgets/proxy (GadgetProxyController) - used to proxy images used from within css, img tags etc.

It is the responsibility of the host application to avoid routing conflicts. The simplest thing to do is avoid defining any paths starting with /gadgets

h1. Installation

h2. Copy Files

h3. Plugin 

Copy the plugin into your rails application's vendor/plugins directory.

h3. Db Migrations

Copy the following files from PLUGIN_ROOT/db/migrate to HOST_APP_RAILS_ROOT/db/migrate:

* 20100706175045_create_gadgets_oauth_clients.rb
* 20100706220459_create_oauth_authorization_codes.rb
* 20100707173623_create_oauth_access_tokens.rb

*N.B.* The above migration timestamps/versions in the file name will likely not work in your host application.  You will likely need to rename the files to have timestamps/versions greater than your most recent migration. Without taking this step, the migrations will not run and this plugin will not work. 

h2. Configuration

h3. Database

Run the db:migrate task to create the new tables before attempting to use the plugin.

h3. Host Application

Change your host application's ApplicationController definition. Add an instance method called current_user_id which will return identifier for the user that is currently logged in
 
<notextile><pre>
class ApplicationController < ActionController::Base

  protected
  
  # required by the gadget plugin to figure out the currently logged in user
  # must be a string representation of the user.
  # A 'username', 'email' or a db primary key are good candidates.
  #
  # this example supposes that there is a model named User with a class method
  # named current that returns the currently logged in user
  def current_user_id
    User.current.id
  end

end
</pre></notextile>


h1. Verify plugin working correctly in your application

h2. Hello world gadget

* Write a sample "hello world gadget" and host it in a separate application, say, a new Rails app running on port 3001. We suggest copying the gadget XML straight from "Google's gadget tutorial":http://code.google.com/apis/gadgets/docs/gs.html and pasting it into a file named public/hello_world.xml in the new Rails app.  Test that you can see http://localhost:3001/hello_world.xml in your browser.

* To your host application, i.e., the gadget rendering server, i.e., the app running on port 3000, add a file named gadgets.html to the public folder.

NOTE: the gadget specification and the gadgets.html need not be on the same server.  For these examples we'll build up a list of gadgets to show on gadgets.html.

<pre>
  <div>
    <h3>Hello World Gadget</h3>
    <iframe src="/gadgets/ifr?nocache=1&url=http://localhost:3001/hello_world.xml" width="200" height="200"></iframe>
  </div>
</pre>

Point your browser to the gadgets.html (http://localhost:3000/gadgets.html). You should see a gadget containing 'hello world'.

h2. More 'advanced' gadgets

* Add the following weather gadget to gadgets.html

<pre>
  <div>
    <h3> google gadget </h3>
    <iframe src="/gadgets/ifr?nocache=1&url=http://www.labpixies.com/campaigns/weather/weather.xml&up_zip_code=10001" width="280", height="240"> </iframe>
  </div>
</pre>

You point your browser to http://localhost:3000/gadgets.html to see the current weather in New York.

NOTE: the gadget specification and the gadget rendering server need not be on the same server!

h2. Lets do OAuth2!

This section assumes you start host app at localhost:3000, and use TW Studio Oauth2 Plugin as oauth provider (https://fmtstdscm02.thoughtworks.com/oauth2/)

h3. Setup the OAuth2 provider

  $ git clone https://fmtstdscm02.thoughtworks.com/oauth2/
  $ cd oauth2/provider
  $ script/rake db:migrate
  $ script/https_server -p5000
  
*N.B* We are starting the gadget backend server in *HTTPS* as this is a requirement of the OAuth2.0 specification. All OAuth 2.0 traffic must be over SSL.  This was done in a response to feedback from the community that the OAuth1.0a request signature specification was too confusing.

This will startup an OAuth2 provider on https port 5000.  This will now be the gadget backend server.  (Although you are free to leave the other gadget backend running on 3001, as gadget backends can be running anywhere.)

* Sign up for an account (user:foo@bar.com, pass:p) on the oauth2 provider by pointing your brower to https://localhost:5000
* Login using the same credentials (user:foo@bar.com, pass:p)
* register your OAuth2 client application (https://localhost:5000/oauth/clients) using the following details:
** name: Provider
** redirect_uri: http://localhost:3000/gadgets/oauthcallback
* Once you register the client application, you'll get a client_id and client_secret back. Copy it somewhere for later use.

h3. Create a OAuth gadget

* Create a gadget that renders content using OAuth2, you can use SAMPLE_APP_ROOT/test/data/oauth2_gadget.xml as a start point. Copy this file into the public folder of the gadget backend app so that it will be accessible at http://localhost:5000/oauth2_gadget.xml
* Add the gadget to our gadgets page (http://localhost:3000/gadgets.html):

<pre>
  <div>
    <h3> gadget with oauth </h3>
    <iframe src="/gadgets/ifr?nocache=1&url=https://localhost:5000/oauth2_gadget.xml" width="200" height="200"></iframe>
  </div>
</pre>

* You will see an error if you point your browser to http://localhost:3000/gadgets.html now, this is most likely because this gadget has not been associated with the OAuth2 client we created (although it could still be a configuration error if you've made a type somewhere). Also, note that if you have the old hello world gadget still kicking around you will likely need to change the port from 3001 on HTTP to 5000 over HTTPS in the gadgets.html markup.

Read more on "Writing OAuth Gadget":http://code.google.com/apis/gadgets/docs/oauth.html

h3. Associate the gadget with OAuth2 client created

* Open http://localhost:3000/gadgets/oauth_clients/new
* Create gadget oauth client with following values:
** gadget url: https://localhost:5000/oauth2_gadget.xml
** client id: the client id provided by the oauth2 provider when you registered a client
** client secret: the client secret provided by the oauth2 provider when you registered a client
** service name: 'Provider' (hard coded in oauth2_gadgets.xml, so do not change this)
** redirect uri: http://localhost:3000/gadgets/oauthcallback

Implementation TODO: On this side the redirect URI should be calculated and not user-entered. The OAuth client knows exactly what its callback URI is.

h3. Test OAuth2 gadget

* Point your browser to http://localhost:3000/gadgets.html, you'll be asked to click on a link to authorize access.
* Once you go through the flow and authorize access, you should see the contents of the protected resource. In the case of the sample gadget, you should see current user's login 'foo@bar.com' against a green background.
